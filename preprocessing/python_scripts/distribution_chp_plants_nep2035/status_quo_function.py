# -*- coding: utf-8 -*-"""Created on Fri Nov 18 10:52:05 2016This File included all functions for the chapter status_quo_data.__copyright__ = "Europa-Universit√§t Flensburg - ZNES"__license__ = "GNU Affero General Public License Version 3 (AGPL-3.0)"__url__ = "https://github.com/openego/data_processing/blob/master/LICENSE"__author__ = "mario kropshofer""""##############################################################################from decimal import Decimalclass C_status_quo_functions(object):            def sorting_BAFA(Datas):            """        This method is for sorting the plants in performance classes.        The partition sizes are the same like BAFA has.        Keep in mind that the Plants are only from generation_type 'gas'         or 'biomass'         This function needs only one input parameter            input parameter:                ############################# Datas #############################        Datas include all values of renewable power plants from         the database. But this function is only using the values of        electrical_capacity. The unit of this values is kW.            The result of this function is first the sum of energy in each        power class and seconde it will be return the number of plants in        each class.            Output parameters:                ######################## performance_class ######################        performance_class is a list with 9 values. Each value represent         the sum of energy of all plants they energy are in the sector of         the classes. The unit of each value are kW.            Index 0 : sum of energy in the sector: under 2kW        Index 1 : sum of energy in the sector: between 2kW and 10kW        Index 2 : sum of energy in the sector: between 10kW and 20kW        Index 3 : sum of energy in the sector: between 20kW and 50kW        Index 4 : sum of energy in the sector: between 50kW and 250kW        Index 5 : sum of energy in the sector: between 250kW and 500kW        Index 6 : sum of energy in the sector: between 500kW and 1.000kW        Index 7 : sum of energy in the sector: between 1.000kW and 2.000kW        Index 8 : sum of energy in the sector: between 2.000kW and 10.000kW            ##################### performance_class_count ######################        performance_class_count is a list with 9 values, too. But each value        ist a number of plants which are sorted in the sector. The type of         all values is NUMERIC.             Index 0 : number of plants in the sector: under 2kW        Index 1 : number of plants in the sector: between 2kW and 10kW        Index 2 : number of plants in the sector: between 10kW and 20kW        Index 3 : number of plants in the sector: between 20kW and 50kW        Index 4 : number of plants in the sector: between 50kW and 250kW        Index 5 : number of plants in the sector: between 250kW and 500kW        Index 6 : number of plants in the sector: between 500kW and 1.000kW        Index 7 : number of plants in the sector: between 1.000kW and 2.000kW        Index 8 : number of plants in the sector: between 2.000kW and 10.000kW        """                        performance_class = [0,0,0,0,0,0,0,0,0]        performance_class_count = [0,0,0,0,0,0,0,0,0]                        for data in Datas:            if(data.electrical_capacity <= 2):                performance_class[0]+=data.electrical_capacity                performance_class_count[0]+=1                            elif((data.electrical_capacity >2) \                                    and (data.electrical_capacity <= 10)):                performance_class[1]+=data.electrical_capacity                performance_class_count[1]+=1                            elif((data.electrical_capacity >10) \                                    and (data.electrical_capacity <= 20)):                performance_class[2]+=data.electrical_capacity                performance_class_count[2]+=1                            elif((data.electrical_capacity >20) \                                    and (data.electrical_capacity <= 50)):                performance_class[3]+=data.electrical_capacity                performance_class_count[3]+=1                            elif((data.electrical_capacity >50) \                                    and (data.electrical_capacity <= 250)):                performance_class[4]+=data.electrical_capacity                performance_class_count[4]+=1                            elif((data.electrical_capacity >250) \                                    and (data.electrical_capacity <= 500)):                performance_class[5]+=data.electrical_capacity                performance_class_count[5]+=1                            elif((data.electrical_capacity >500) \                                    and (data.electrical_capacity <= 1000)):                performance_class[6]+=data.electrical_capacity                performance_class_count[6]+=1                            elif((data.electrical_capacity >1000) \                                    and (data.electrical_capacity <= 2000)):                performance_class[7]+=data.electrical_capacity                performance_class_count[7]+=1                            elif((data.electrical_capacity >2000) \                                    and (data.electrical_capacity <= 10000)):                performance_class[8]+=data.electrical_capacity                performance_class_count[8]+=1                # This function return 2 list with each 9 values.        return [performance_class,performance_class_count]                      def sorting_TSO(Datas):                """        This method sorting the plants sector of TSO's and count the plants        which are sorted.Keep in mind that the Plants are only from         generation_type "gas" or "biomass". This function needs also like        the function: sorting_BAFA only one input parameter.            Input parameter:                ############################# Datas #############################        Datas include all values of renewable power plants from the        database. But this function is only using the values of        electrical_capacity. The unit of this values is kW.        This function return 2 lists. Both list are from the same size.            Output parameters:                ########################### TSO_Class ###########################        TSO_Class is a list with 4 values. Each value represent the sum         of energy of plants which sorted in one of the tso. The units are        kW and saved in type NUMERIC.            Index 0 : sum of energy of the tso: 50Hertz        Index 1 : sum of energy of the tso: Amprion        Index 2 : sum of energy of the tso: TransnetBW        Index 3 : sum of energy of the tso: Tennet            ######################## TSO_Class_count ########################        TSO_Class is a list with 4 values, too. Each value represent the         number of plants which sorted in one of the tso. The values are        saved in type NUMERIC.            Index 0 : sum of energy of the tso: 50Hertz        Index 1 : sum of energy of the tso: Amprion        Index 2 : sum of energy of the tso: TransnetBW        Index 3 : sum of energy of the tso: Tennet        """                   TSO_Class = [0,0,0,0]        TSO_Class_count = [0,0,0,0]                for data in Datas:                        if(data.tso_eic == '50Hertz Transmission Gmbh'):                TSO_Class[0]+=data.electrical_capacity                TSO_Class_count[0]+=1            elif(data.tso_eic == 'Amprion GmbH'):                TSO_Class[1]+=data.electrical_capacity                TSO_Class_count[1]+=1            elif(data.tso_eic == 'TransnetBW GmbH'):                TSO_Class[2]+=data.electrical_capacity                TSO_Class_count[2]+=1            elif(data.tso_eic == 'TenneT TSO GmbH'):                TSO_Class[3]+=data.electrical_capacity                TSO_Class_count[3]+=1                         # It returns 2 list with 4 values each.              return [TSO_Class, TSO_Class_count]                                                                    def share_power(Classes):                """        This function calculate the percentage energy of each         energy sector. For this calculation it needs only one input        parameter.                Input parameter:            ######################## Classes ############################        performance_class is a list with 9 values. Each value represent         the sum of energy of all plants they energy are in the sector of         the classes. The unit of each value are kW.            Index 0 : sum of energy in the sector: under 2kW        Index 1 : sum of energy in the sector: between 2kW and 10kW        Index 2 : sum of energy in the sector: between 10kW and 20kW        Index 3 : sum of energy in the sector: between 20kW and 50kW        Index 4 : sum of energy in the sector: between 50kW and 250kW        Index 5 : sum of energy in the sector: between 250kW and 500kW        Index 6 : sum of energy in the sector: between 500kW and 1.000kW        Index 7 : sum of energy in the sector: between 1.000kW and 2.000kW        Index 8 : sum of energy in the sector: between 2.000kW and 10.000kW            The function calculate for each sector the percentage energy of the         whole energy. For each value it's devide the energy of a sector by        the overall energy and multiplicate it with 100.            Output parameter:                ####################### percentage_energy ##########################        percentage_energy is a list with 9 values. Each values represent the         percentage energy of each sector. Its saved in type NUMERIC.         The unit of the results are percent. So keep in mind that for example        a result of 0,5 saved as 50[%].            Index 0 : percentage energy of the sector: under 2kW        Index 1 : percentage energy of sector: between 2kW and 10kW        Index 2 : percentage energy of sector: between 10kW and 20kW        Index 3 : percentage energy of sector: between 20kW and 50kW        Index 4 : percentage energy of sector: between 50kW and 250kW        Index 5 : percentage energy of sector: between 250kW and 500kW        Index 6 : percentage energy of sector: between 500kW and 1.000kW        Index 7 : percentage energy of sector: between 1.000kW and 2.000kW        Index 8 : percentage energy of sector: between 2.000kW and 10.000kW        """                      percentage_energy=[]                overall_power = sum(Classes)                for i in Classes:            percentage_energy.append\                    (round(Decimal(i)/Decimal(overall_power)*100,2))                        # It returns a list with 9 values, each value is in percent         # and rounded to 2 decimal places.             return percentage_energy                        def average(Classes,Classes_count):                """        This function calculate the average energy of each sector. For this        it's need 2 input parameters.            Input parameter:                ########################### Classes ################################        performance_class is a list with 9 values. Each value represent         the sum of energy of all plants they energy are in the sector of         the classes. The unit of each value are kW.            Index 0 : sum of energy in the sector: under 2kW        Index 1 : sum of energy in the sector: between 2kW and 10kW        Index 2 : sum of energy in the sector: between 10kW and 20kW        Index 3 : sum of energy in the sector: between 20kW and 50kW        Index 4 : sum of energy in the sector: between 50kW and 250kW        Index 5 : sum of energy in the sector: between 250kW and 500kW        Index 6 : sum of energy in the sector: between 500kW and 1.000kW        Index 7 : sum of energy in the sector: between 1.000kW and 2.000kW        Index 8 : sum of energy in the sector: between 2.000kW and 10.000kW            ######################### Classes_count #############################        performance_class_count is a list with 9 values, too. But each value        ist a number of plants which are sorted in the sector. The type of         all values is NUMERIC.             Index 0 : number of plants in the sector: under 2kW        Index 1 : number of plants in the sector: between 2kW and 10kW        Index 2 : number of plants in the sector: between 10kW and 20kW        Index 3 : number of plants in the sector: between 20kW and 50kW        Index 4 : number of plants in the sector: between 50kW and 250kW        Index 5 : number of plants in the sector: between 250kW and 500kW        Index 6 : number of plants in the sector: between 500kW and 1.000kW        Index 7 : number of plants in the sector: between 1.000kW and 2.000kW        Index 8 : number of plants in the sector: between 2.000kW and 10.000kW        The results are the divisions of onn energy with the number of plants         of that sector.            Output parameter:                ############################### average ##############################        average is a list with 9 values. Each value is the average power of         a sector. The unit of the results are kW.            Index 0 : average of the sector: under 2kW        Index 1 : average of the sector: between 2kW and 10kW        Index 2 : average of the sector: between 10kW and 20kW        Index 3 : average of the sector: between 20kW and 50kW        Index 4 : average of the sector: between 50kW and 250kW        Index 5 : average of the sector: between 250kW and 500kW        Index 6 : average of the sector: between 500kW and 1.000kW        Index 7 : average of the sector: between 1.000kW and 2.000kW        Index 8 : average of in the sector: between 2.000kW and 10.000kW        """                        average=[]                i=0 # Start index                       while(i < len(Classes)):            average.append(round(Decimal(Classes[i])/Decimal(Classes_count[i]),2))            i+=1                            # It's return a lis with 9 average energy values.           return average                    def add_2_lists(List_1,List_2):                """         This function add two lists elemet wise.        For this function are 2 lists needed which have the same size.                # Here will added the list of percentage energy with data from status        quo and percentage energy with data from BAFA.                The Result is also a list with the same size as the two added lists.          """              result_list = []        i=0 # Start index                if(len(List_1) == len(List_2)):            while(i < len(List_1)):                result_list.append(round(Decimal(List_1[i])+\                Decimal(List_2[i]),2))                i+=1        else:            print('The sizes of the lists are different!')                            return result_list                            def mul_num_list(number,List_2):                """         This function multiplicate a list with a number.        For this function are needed a list and a number.                    # Here will be multiplicate a list of percentage energy of         each tso and the whole distribution energy.             Input parameter:            ############################## number ################################            number is the whole distribution energy. The unit is kW.                ############################## List_2 ################################        List_2 is a list with 4 values . Each value is the percentage energy         of one tso.                Index 0 : percentage energy of the tso: 50Hertz         Index 1 : percentage energy of the tso: Amprion         Index 2 : percentage energy of the tso: TransnetBW         Index 3 : percentage energy of the tso: TenneT                 The Result is also a list with the same size as the import list.        It's represent how much energy distribute in each tso.                Output parameter:                    ########################## result_list ###############################        result_list is a list with 4 values. Each value is the result of the         multiplication of the whole distribution energy and the percentage         energy of each tso.                Index 0 : distribution energy of the tso: 50Hertz         Index 1 : distribution energy of the tso: Amprion         Index 2 : distribution energy of the tso: TransnetBW         Index 3 : distribution energy of the tso: TenneT         """            result_list = []                i=0 # Start index                while(i < len(List_2)):            result_list.append(round(number*Decimal(List_2[i]),2))            i+=1                        return result_list