# -*- coding: utf-8 -*-"""Created on Fri Nov 18 20:43:03 2016This file include all function for the chapter: 'Classification of the loads-areas in tso-areas'.__copyright__ = "Europa-Universität Flensburg - ZNES"__license__ = "GNU Affero General Public License Version 3 (AGPL-3.0)"__url__ = "https://github.com/openego/data_processing/blob/master/LICENSE"__author__ = "mario kropshofer""""import progressbarfrom decimal import Decimalclass C_classification(object):        def according_in_tso(area_1,area_2):                """        The function is for classification the load areas.         i.e., Every load area will be checked to which of the tso is belong         and append in a new list the name of the tso which it belong.        For each load_area will be calculated the distance to each tso. The         minimum distance set the name of the tso and save that in a new list.        The function needs for the classification 2 lists.                Input parameters are:                       ############################## area_1 ################################        area_1 is a list witch have 4 values. Each value have the geometry        data of one of a tso.        Index [0] : geometry-data of the tso "50Hertz"        Index [1] : geometry-data of the tso "Amprion"        Index [2] : geometry-data of the tso "TransnetBW"        Index [3] : geometry-data of the tso "TenneT"                ############################## area_2 ################################        area_2 is also a list, but this list have n-values. The number of         values is depend of the number of collected load areas. But each of the        n-values is from typ GEOMETRY.                After the classification the function return one list with the same        size like the list area_2.                Output parameter is:                ############################### List #################################        the returning list have n-values from typ STRING.        """               print('According in tso is started.')                # progressbar of the classification        classification_bar = progressbar.ProgressBar(redirect_stdout = True)                List = [] # Returning List                i = 0 # start-index                # Classification of each load area        while (i < len(area_2)):                        classification_bar.update(i/(len(area_2)-1)*100)            distance = [0,0,0,0]            distance[0] = area_1[0].distance(area_2[i])            distance[1] = area_1[1].distance(area_2[i])            distance[2] = area_1[2].distance(area_2[i])            distance[3] = area_1[3].distance(area_2[i])                            distance_id = distance.index(min(distance))                            if(distance_id == 0):                List.append("50Hertz Transmission GmbH")            elif(distance_id == 1):                List.append("Amprion GmbH")            elif(distance_id == 2):                List.append("TransnetBW GmbH")            else: #(distance_id == 3):                List.append("TenneT TSO GmbH")                            i+=1                        print('According in tso is finished.')                # Returning parameter : List                 return List                    def classification_tso_density(density,TSO):                """         This function calculate the sum of density for each tso.        First it's checked the membership for every value. This mean,to which        tso is the density to add. After that it's add the density to the        right density value of tso.         For the calculation it's need two input parameters. Both of the are         from typ list.                Input parameters are:                       ############################## density ###############################        Density is a list with n-values. The number of values is depend of the        number of collected load areas. Each of the value is from typ NUMERIC.        The unit is: person/1ha                ################################ TSO #################################        TSO is also a list with the same size like density. But this values        are from typ STRING.                The function return a list with 4 values.                Output parameters are:                ############################# TSO_density ############################        TSO_density is a list with 4 values. Every value is from typ NUMERIC        and the sum of density for each tso.                      Index 0 : sum of density for the tso: 50Hertz        Index 1 : sum of density for the tso: Amprion        Index 2 : sum of density for the tso: TransnetBW        Index 3 : sum of density for the tso: Tennet        """                        TSO_density = [0,0,0,0]                i=0 # Starting index                 # Classification each value in tso area and add the density        while(i< len(density)):            if(TSO[i] == "50Hertz Transmission GmbH"):                TSO_density[0]+=Decimal(density[i])            elif(TSO[i] == "Amprion GmbH"):                TSO_density[1]+=Decimal(density[i])            elif(TSO[i] == "TransnetBW GmbH"):                TSO_density[2]+=Decimal(density[i])            else: #(TSO == "TenneT TSO GmbH"):                TSO_density[3]+=Decimal(density[i])                            i+=1                    # Return parameter is al list with 4 values [1Person/km²].        return TSO_density                            def share_power_per_person_and_sqkm(TSO_energy,TSO_density):                        """        This function is for calculation the power value for 1 person         per squarekilometers (density).        This will be calculate for each tso and will be the reference        value for calculate how much power each load area accept.                This function needs for the calculation two input parameters.                input parameters:                ######################### TSO_energy ##########################        TSO_energy is a list with 4 values from type NUMERIC. Each        value is the distribution energy of a tso [kW].               Index 0 : distribution energy of the tso: 50Hertz        Index 1 : distribution energy of the tso: Amprion        Index 2 : distribution energy of the tso: TransnetBW        Index 3 : distribution energy of the tso: Tennet                ######################## TSO_density ##########################        TSO_density is a list with 4 values, too. This 4 values are        the sum of density in each tso [person/km²]                Index 0 : sum of density for the tso: 50Hertz        Index 1 : sum of density for the tso: Amprion        Index 2 : sum of density for the tso: TransnetBW        Index 3 : sum of density for the tso: Tennet                The result of this function is a list which include for each        tso the reference energy.                        Output parameter:                    ##################### basis_reference_TSO #####################        basis_reference_TSO is a list with n-values from typ NUMERIC.        Each value are the reference value of each tso. [1Person/km²]                Index 0 : reference value for the tso: 50Hertz        Index 1 : reference value for the tso: Amprion        Index 2 : reference value for the tso: TransnetBW        Index 3 : reference value for the tso: Tennet        """                basis_reference_TSO = [0,0,0,0]                # Calculate the power per 1 person/km² for each TSO                # 50Hertz        if(TSO_density[0] == 0):            basis_reference_TSO[0] = 0        else:            basis_reference_TSO[0] = TSO_energy[0]/TSO_density[0]                    # Amprion        if(TSO_density[1] == 0):            basis_reference_TSO[1] = 0        else:            basis_reference_TSO[1] = TSO_energy[1]/TSO_density[1]                    # TransnetBW            if(TSO_density[2] == 0):            basis_reference_TSO[2] = 0        else:            basis_reference_TSO[2] = TSO_energy[2]/TSO_density[2]                    # TenneT        if(TSO_density[3] == 0):            basis_reference_TSO[3] = 0        else:            basis_reference_TSO[3] = TSO_energy[3]/TSO_density[3]                         # Return Parameter is a list with 4 values.           return basis_reference_TSO                    def calc_reference_power(reference,load_area_density,load_area_tso):                """        This function is for calculation the reference energy for each         load area. The reference energy of each load area is the energy        how much a load area approximately accept.        This function need 3 input parameter.                Input parameter:                ########################### reference ############################        The parameter reference is a list with 4 values. Each value is         from typ NUMERIC and is the reference energy of one of the tso's.        The unit of the values are [1Person/km²]                Index 0 : reference value for the tso: 50Hertz        Index 1 : reference value for the tso: Amprion        Index 2 : reference value for the tso: TransnetBW        Index 3 : reference value for the tso: Tennet         ####################### load_area_density ########################        load_area_density is also a list, but this list have n-values.         Each value is the density in a load area and is save as a typ of        NUMERIC.                ######################### load_area_tso ##########################        load_area_tso is a list, too. This list have the same size like        the seconde input parameter. Each of the n-values is from typ         STRING and include the membership to one of the tso.                The Results of this function are the reference energy for each        load area.                Output parameter:                    ######################### reference_power ########################        reference_power is a list with the same size like the input         parameter load_area_density or load_area_tso. All n-values are         from typ NUMERIC and are show the reference how much energy         each load area approximately accept.The unit of each value is kW.             """                                reference_power=[]        i = 0 # Start index                # Caculate the reference power of each load area        while (i<len(load_area_density)):            if(load_area_tso[i] == "50Hertz Transmission GmbH"):                reference_power.append(load_area_density[i]*reference[0])            elif(load_area_tso[i] == "Amprion GmbH"):                reference_power.append(load_area_density[i]*reference[1])            elif(load_area_tso[i] == "TransnetBW GmbH"):                reference_power.append(load_area_density[i]*reference[2])            else: #(load_area_tso[i] == "TenneT TSO GmbH"):                reference_power.append(load_area_density[i]*reference[3])            i+=1                 # Return a list with n-values from typ NUMERIC.           return reference_power    